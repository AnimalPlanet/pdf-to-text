Chapter 9
Packages and
Interfaces
223
This chapter examines two of Java’s most innovative features: packages andinterfaces. Packages are containers for classes that are used to keep the class namespace compartmentalized. For example, a package allows you to create a class
named List, which you can store in your own package without concern that it will
collide with some other class named List stored elsewhere. Packages are stored in a
hierarchical manner and are explicitly imported into new class definitions.
In previous chapters you have seen how methods define the interface to the data in
a class. Through the use of the interface keyword, Java allows you to fully abstract the
interface from its implementation. Using interface, you can specify a set of methods
which can be implemented by one or more classes. The interface, itself, does not
actually define any implementation. Although they are similar to abstract classes,
interfaces have an additional capability: A class can implement more than one
interface. By contrast, a class can only inherit a single superclass (abstract or
otherwise).
Packages and interfaces are two of the basic components of a Java program. In
general, a Java source file can contain any (or all) of the following four internal parts:
■ A single package statement (optional)
■ Any number of import statements (optional)
■ A single public class declaration (required)
■ Any number of classes private to the package (optional)
Only one of these—the single public class declaration—has been used in the
examples so far. This chapter will explore the remaining parts.
Packages
In the preceding chapters, the name of each example class was taken from the same
name space. This means that a unique name had to be used for each class to avoid
name collisions. After a while, without some way to manage the name space, you
could run out of convenient, descriptive names for individual classes. You also need
some way to be assured that the name you choose for a class will be reasonably
unique and not collide with class names chosen by other programmers. (Imagine
a small group of programmers fighting over who gets to use the name “Foobar” as a
class name. Or, imagine the entire Internet community arguing over who first named
a class “Espresso.”) Thankfully, Java provides a mechanism for partitioning the class
name space into more manageable chunks. This mechanism is the package. The
package is both a naming and a visibility control mechanism. You can define classes
inside a package that are not accessible by code outside that package. You can also
define class members that are only exposed to other members of the same package.
This allows your classes to have intimate knowledge of each other, but not expose
that knowledge to the rest of the world.
224 J a v a ™ 2 : T h e C o m p l e t e R e f e r e n c e
C h a p t e r 9 : P a c k a g e s a n d I n t e r f a c e s 225
TH
E
JA
V
A
LA
N
G
U
A
G
E
Defining a Package
To create a package is quite easy: simply include a package command as the first
statement in a Java source file. Any classes declared within that file will belong to the
specified package. The package statement defines a name space in which classes are
stored. If you omit the package statement, the class names are put into the default
package, which has no name. (This is why you haven’t had to worry about packages
before now.) While the default package is fine for short, sample programs, it is
inadequate for real applications. Most of the time, you will define a package for
your code.
This is the general form of the package statement:
package pkg;
Here, pkg is the name of the package. For example, the following statement creates a
package called MyPackage.
package MyPackage;
Java uses file system directories to store packages. For example, the .class files for
any classes you declare to be part of MyPackage must be stored in a directory called
MyPackage. Remember that case is significant, and the directory name must match the
package name exactly.
More than one file can include the same package statement. The package statement
simply specifies to which package the classes defined in a file belong. It does not exclude
other classes in other files from being part of that same package. Most real-world packages
are spread across many files.
You can create a hierarchy of packages. To do so, simply separate each package
name from the one above it by use of a period. The general form of a multileveled
package statement is shown here:
package pkg1[.pkg2[.pkg3]];
A package hierarchy must be reflected in the file system of your Java development
system. For example, a package declared as
package java.awt.image;
needs to be stored in java/awt/image, java\awt\image, or java:awt:image on your
UNIX, Windows, or Macintosh file system, respectively. Be sure to choose your
package names carefully. You cannot rename a package without renaming the
directory in which the classes are stored.
226 J a v a ™ 2 : T h e C o m p l e t e R e f e r e n c e
Finding Packages and CLASSPATH
As just explained, packages are mirrored by directories. This raises an important
question: How does the Java run-time system know where to look for packages that
you create? The answer has two parts. First, by default, the Java run-time system uses
the current working directory as its starting point. Thus, if your package is in the current
directory, or a subdirectory of the current directory, it will be found. Second, you can
specify a directory path or paths by setting the CLASSPATH environmental variable.
For example, consider the following package specification.
package MyPack;
In order for a program to find MyPack, one of two things must be true. Either the
program is executed from a directory immediately above MyPack, or CLASSPATH
must be set to include the path to MyPack. The first alternative is the easiest (and
doesn’t require a change to CLASSPATH), but the second alternative lets your
program find MyPack no matter what directory the program is in. Ultimately, the
choice is yours.
The easiest way to try the examples shown in this book is to simply create the
package directories below your current development directory, put the .class files into
the appropriate directories and then execute the programs from the development
directory. This is the approach assumed by the examples.
A Short Package Example
Keeping the preceding discussion in mind, you can try this simple package:
// A simple package
package MyPack;
class Balance {
String name;
double bal;
Balance(String n, double b) {
name = n;
bal = b;
}
void show() {
if(bal<0)
System.out.print("--> ");
C h a p t e r 9 : P a c k a g e s a n d I n t e r f a c e s 227
TH
E
JA
V
A
LA
N
G
U
A
G
E
System.out.println(name + ": $" + bal);
}
}
class AccountBalance {
public static void main(String args[]) {
Balance current[] = new Balance[3];
current[0] = new Balance("K. J. Fielding", 123.23);
current[1] = new Balance("Will Tell", 157.02);
current[2] = new Balance("Tom Jackson", -12.33);
for(int i=0; i<3; i++) current[i].show();
}
}
Call this file AccountBalance.java, and put it in a directory called MyPack.
Next, compile the file. Make sure that the resulting .class file is also in the MyPack
directory. Then try executing the AccountBalance class, using the following command line:
java MyPack.AccountBalance
Remember, you will need to be in the directory above MyPack when you execute this
command, or to have your CLASSPATH environmental variable set appropriately.
As explained, AccountBalance is now part of the package MyPack. This means that
it cannot be executed by itself. That is, you cannot use this command line:
java AccountBalance
AccountBalance must be qualified with its package name.
Access Protection
In the preceding chapters, you learned about various aspects of Java’s access control
mechanism and its access specifiers. For example, you already know that access to a
private member of a class is granted only to other members of that class. Packages add
another dimension to access control. As you will see, Java provides many levels of
protection to allow fine-grained control over the visibility of variables and methods
within classes, subclasses, and packages.
Classes and packages are both means of encapsulating and containing the name
space and scope of variables and methods. Packages act as containers for classes and
228 J a v a ™ 2 : T h e C o m p l e t e R e f e r e n c e
other subordinate packages. Classes act as containers for data and code. The class is
Java’s smallest unit of abstraction. Because of the interplay between classes and
packages, Java addresses four categories of visibility for class members:
■ Subclasses in the same package
■ Non-subclasses in the same package
■ Subclasses in different packages
■ Classes that are neither in the same package nor subclasses
The three access specifiers, private, public, and protected, provide a variety of
ways to produce the many levels of access required by these categories. Table 9-1 sums
up the interactions.
While Java’s access control mechanism may seem complicated, we can simplify it as
follows. Anything declared public can be accessed from anywhere. Anything declared
private cannot be seen outside of its class. When a member does not have an explicit
access specification, it is visible to subclasses as well as to other classes in the same
package. This is the default access. If you want to allow an element to be seen outside
your current package, but only to classes that subclass your class directly, then declare
that element protected.
Table 9-1 applies only to members of classes. A class has only two possible access
levels: default and public. When a class is declared as public, it is accessible by any
other code. If a class has default access, then it can only be accessed by other code
within its same package.
Private No modifier Protected Public
Same class Yes Yes Yes Yes
Same package
subclass
No Yes Yes Yes
Same package
non-subclass
No Yes Yes Yes
Different
package
subclass
No No Yes Yes
Different
package
non-subclass
No No No Yes
Table 9-1. Class Member Access
C h a p t e r 9 : P a c k a g e s a n d I n t e r f a c e s 229
TH
E
JA
V
A
LA
N
G
U
A
G
E
An Access Example
The following example shows all combinations of the access control modifiers. This
example has two packages and five classes. Remember that the classes for the two
different packages need to be stored in directories named after their respective
packages—in this case, p1 and p2.
The source for the first package defines three classes: Protection, Derived, and
SamePackage. The first class defines four int variables in each of the legal protection
modes. The variable n is declared with the default protection, n_pri is private, n_pro is
protected, and n_pub is public.
Each subsequent class in this example will try to access the variables in an instance
of this class. The lines that will not compile due to access restrictions are commented
out by use of the single-line comment //. Before each of these lines is a comment listing
the places from which this level of protection would allow access.
The second class, Derived, is a subclass of Protection in the same package, p1. This
grants Derived access to every variable in Protection except for n_pri, the private one.
The third class, SamePackage, is not a subclass of Protection, but is in the same package
and also has access to all but n_pri.
This is file Protection.java:
package p1;
public class Protection {
int n = 1;
private int n_pri = 2;
protected int n_pro = 3;
public int n_pub = 4;
public Protection() {
System.out.println("base constructor");
System.out.println("n = " + n);
System.out.println("n_pri = " + n_pri);
System.out.println("n_pro = " + n_pro);
System.out.println("n_pub = " + n_pub);
}
}
This is file Derived.java:
package p1;
class Derived extends Protection {
Derived() {
System.out.println("derived constructor");
System.out.println("n = " + n);
//  class only
//  System.out.println("n_pri = " + n_pri);
System.out.println("n_pro = " + n_pro);
System.out.println("n_pub = " + n_pub);
}
}
This is file SamePackage.java:
package p1;
class SamePackage {
SamePackage() {
Protection p = new Protection();
System.out.println("same package constructor");
System.out.println("n = " + p.n);
//  class only
//  System.out.println("n_pri = " + p.n_pri);
System.out.println("n_pro = " + p.n_pro);
System.out.println("n_pub = " + p.n_pub);
}
}
Following is the source code for the other package, p2. The two classes defined in
p2 cover the other two conditions which are affected by access control. The first class,
Protection2, is a subclass of p1.Protection. This grants access to all of p1.Protection’s
variables except for n_pri (because it is private) and n, the variable declared with the
default protection. Remember, the default only allows access from within the class or
the package, not extra-package subclasses. Finally, the class OtherPackage has access
to only one variable, n_pub, which was declared public.
This is file Protection2.java:
package p2;
class Protection2 extends p1.Protection {
230 J a v a ™ 2 : T h e C o m p l e t e R e f e r e n c e
Protection2() {
System.out.println("derived other package constructor");
//  class or package only
//  System.out.println("n = " + n);
//  class only
//  System.out.println("n_pri = " + n_pri);
System.out.println("n_pro = " + n_pro);
System.out.println("n_pub = " + n_pub);
}
}
This is file OtherPackage.java:
package p2;
class OtherPackage {
OtherPackage() {
p1.Protection p = new p1.Protection();
System.out.println("other package constructor");
//  class or package only
//  System.out.println("n = " + p.n);
//  class only
//  System.out.println("n_pri = " + p.n_pri);
//  class, subclass or package only
//  System.out.println("n_pro = " + p.n_pro);
System.out.println("n_pub = " + p.n_pub);
}
}
If you wish to try these two packages, here are two test files you can use. The one
for package p1 is shown here:
// Demo package p1.
package p1;
C h a p t e r 9 : P a c k a g e s a n d I n t e r f a c e s 231
TH
E
JA
V
A
LA
N
G
U
A
G
E
232 J a v a ™ 2 : T h e C o m p l e t e R e f e r e n c e
// Instantiate the various classes in p1.
public class Demo {
public static void main(String args[]) {
Protection ob1 = new Protection();
Derived ob2 = new Derived();
SamePackage ob3 = new SamePackage();
}
}
The test file for p2 is shown next:
// Demo package p2.
package p2;
// Instantiate the various classes in p2.
public class Demo {
public static void main(String args[]) {
Protection2 ob1 = new Protection2();
OtherPackage ob2 = new OtherPackage();
}
}
Importing Packages
Given that packages exist and are a good mechanism for compartmentalizing diverse
classes from each other, it is easy to see why all of the built-in Java classes are stored in
packages. There are no core Java classes in the unnamed default package; all of the
standard classes are stored in some named package. Since classes within packages
must be fully qualified with their package name or names, it could become tedious to
type in the long dot-separated package path name for every class you want to use.
For this reason, Java includes the import statement to bring certain classes, or entire
packages, into visibility. Once imported, a class can be referred to directly, using only
its name. The import statement is a convenience to the programmer and is not
technically needed to write a complete Java program. If you are going to refer to a
few dozen classes in your application, however, the import statement will save a lot
of typing.
In a Java source file, import statements occur immediately following the package
statement (if it exists) and before any class definitions. This is the general form of the
import statement:
import pkg1[.pkg2].(classname|*);
C h a p t e r 9 : P a c k a g e s a n d I n t e r f a c e s 233
TH
E
JA
V
A
LA
N
G
U
A
G
E
Here, pkg1 is the name of a top-level package, and pkg2 is the name of a subordinate
package inside the outer package separated by a dot (.). There is no practical limit on
the depth of a package hierarchy, except that imposed by the file system. Finally, you
specify either an explicit classname or a star (*), which indicates that the Java compiler
should import the entire package. This code fragment shows both forms in use:
import java.util.Date;
import java.io.*;
The star form may increase compilation time—especially if you import several large
packages. For this reason it is a good idea to explicitly name the classes that you want
to use rather than importing whole packages. However, the star form has absolutely
no effect on the run-time performance or size of your classes.
All of the standard Java classes included with Java are stored in a package called
java. The basic language functions are stored in a package inside of the java package
called java.lang. Normally, you have to import every package or class that you want
to use, but since Java is useless without much of the functionality in java.lang, it is
implicitly imported by the compiler for all programs. This is equivalent to the following
line being at the top of all of your programs:
import java.lang.*;
If a class with the same name exists in two different packages that you import
using the star form, the compiler will remain silent, unless you try to use one of the
classes. In that case, you will get a compile-time error and have to explicitly name
the class specifying its package.
Any place you use a class name, you can use its fully qualified name, which
includes its full package hierarchy. For example, this fragment uses an import
statement:
import java.util.*;
class MyDate extends Date {
}
The same example without the import statement looks like this:
class MyDate extends java.util.Date {
}
234 J a v a ™ 2 : T h e C o m p l e t e R e f e r e n c e
As shown in Table 9-1, when a package is imported, only those items within the
package declared as public will be available to non-subclasses in the importing code.
For example, if you want the Balance class of the package MyPack shown earlier to be
available as a stand-alone class for general use outside of MyPack, then you will need
to declare it as public and put it into its own file, as shown here:
package MyPack;
/* Now, the Balance class, its constructor, and its
show() method are public.  This means that they can
be used by non-subclass code outside their package.
*/
public class Balance {
String name;
double bal;
public Balance(String n, double b) {
name = n;
bal = b;
}
public void show() {
if(bal<0)
System.out.print("--> ");
System.out.println(name + ": $" + bal);
}
}
As you can see, the Balance class is now public. Also, its constructor and its
show( ) method are public, too. This means that they can be accessed by any type of
code outside the MyPack package. For example, here TestBalance imports MyPack
and is then able to make use of the Balance class:
import MyPack.*;
class TestBalance {
public static void main(String args[]) {
/* Because Balance is public, you may use Balance
class and call its constructor. */
Balance test = new Balance("J. J. Jaspers", 99.88);
test.show(); // you may also call show()
}
}
As an experiment, remove the public specifier from the Balance class and then try
compiling TestBalance. As explained, errors will result.
Interfaces
Using the keyword interface, you can fully abstract a class’ interface from its imple-
mentation. That is, using interface, you can specify what a class must do, but not how
it does it. Interfaces are syntactically similar to classes, but they lack instance variables,
and their methods are declared without any body. In practice, this means that you can
define interfaces which don’t make assumptions about how they are implemented.
Once it is defined, any number of classes can implement an interface. Also, one class
can implement any number of interfaces.
To implement an interface, a class must create the complete set of methods defined
by the interface. However, each class is free to determine the details of its own
implementation. By providing the interface keyword, Java allows you to fully utilize
the “one interface, multiple methods” aspect of polymorphism.
Interfaces are designed to support dynamic method resolution at run time.
Normally, in order for a method to be called from one class to another, both classes
need to be present at compile time so the Java compiler can check to ensure that the
method signatures are compatible. This requirement by itself makes for a static and
nonextensible classing environment. Inevitably in a system like this, functionality gets
pushed up higher and higher in the class hierarchy so that the mechanisms will be
available to more and more subclasses. Interfaces are designed to avoid this problem.
They disconnect the definition of a method or set of methods from the inheritance
hierarchy. Since interfaces are in a different hierarchy from classes, it is possible for
classes that are unrelated in terms of the class hierarchy to implement the same
interface. This is where the real power of interfaces is realized.
Interfaces add most of the functionality that is required for many applications which
would normally resort to using multiple inheritance in a language such as C++.
Defining an Interface
An interface is defined much like a class. This is the general form of an interface:
access interface name {
return-type method-name1(parameter-list);
return-type method-name2(parameter-list);
type final-varname1 = value;
C h a p t e r 9 : P a c k a g e s a n d I n t e r f a c e s 235
TH
E
JA
V
A
LA
N
G
U
A
G
E
236 J a v a ™ 2 : T h e C o m p l e t e R e f e r e n c e
type final-varname2 = value;
// ...
return-type method-nameN(parameter-list);
type final-varnameN = value;
}
Here, access is either public or not used. When no access specifier is included, then
default access results, and the interface is only available to other members of the
package in which it is declared. When it is declared as public, the interface can be used
by any other code. name is the name of the interface, and can be any valid identifier.
Notice that the methods which are declared have no bodies. They end with a semicolon
after the parameter list. They are, essentially, abstract methods; there can be no default
implementation of any method specified within an interface. Each class that includes
an interface must implement all of the methods.
Variables can be declared inside of interface declarations. They are implicitly final
and static, meaning they cannot be changed by the implementing class. They must also
be initialized with a constant value. All methods and variables are implicitly public if
the interface, itself, is declared as public.
Here is an example of an interface definition. It declares a simple interface which
contains one method called callback( ) that takes a single integer parameter.
interface Callback {
void callback(int param);
}
Implementing Interfaces
Once an interface has been defined, one or more classes can implement that interface.
To implement an interface, include the implements clause in a class definition, and
then create the methods defined by the interface. The general form of a class that
includes the implements clause looks like this:
access class classname [extends superclass]
[implements interface [,interface...]] {
// class-body
}
Here, access is either public or not used. If a class implements more than one interface,
the interfaces are separated with a comma. If a class implements two interfaces that
declare the same method, then the same method will be used by clients of either
interface. The methods that implement an interface must be declared public. Also, the
type signature of the implementing method must match exactly the type signature
specified in the interface definition.
Here is a small example class that implements the Callback interface shown earlier.
class Client implements Callback {
// Implement Callback's interface
public void callback(int p) {
System.out.println("callback called with " + p);
}
}
Notice that callback( ) is declared using the public access specifier.
When you implement an interface method, it must be declared as public.
It is both permissible and common for classes that implement interfaces to define
additional members of their own. For example, the following version of Client
implements callback( ) and adds the method nonIfaceMeth( ):
class Client implements Callback {
// Implement Callback's interface
public void callback(int p) {
System.out.println("callback called with " + p);
}
void nonIfaceMeth() {
System.out.println("Classes that implement interfaces " +
"may also define other members, too.");
}
}
Accessing Implementations Through Interface References
You can declare variables as object references that use an interface rather than a class
type. Any instance of any class that implements the declared interface can be referred
to by such a variable. When you call a method through one of these references, the
correct version will be called based on the actual instance of the interface being referred
to. This is one of the key features of interfaces. The method to be executed is looked up
dynamically at run time, allowing classes to be created later than the code which calls
methods on them. The calling code can dispatch through an interface without having
to know anything about the “callee.” This process is similar to using a superclass
reference to access a subclass object, as described in Chapter 8.
C h a p t e r 9 : P a c k a g e s a n d I n t e r f a c e s 237
TH
E
JA
V
A
LA
N
G
U
A
G
E
238 J a v a ™ 2 : T h e C o m p l e t e R e f e r e n c e
Because dynamic lookup of a method at run time incurs a significant overhead when
compared with the normal method invocation in Java, you should be careful not to use
interfaces casually in performance-critical code.
The following example calls the callback( ) method via an interface reference
variable:
class TestIface {
public static void main(String args[]) {
Callback c = new Client();
c.callback(42);
}
}
The output of this program is shown here:
callback called with 42
Notice that variable c is declared to be of the interface type Callback, yet it was
assigned an instance of Client. Although c can be used to access the callback( )
method, it cannot access any other members of the Client class. An interface reference
variable only has knowledge of the methods declared by its interface declaration.
Thus, c could not be used to access nonIfaceMeth( ) since it is defined by Client but
not Callback.
While the preceding example shows, mechanically, how an interface reference
variable can access an implementation object, it does not demonstrate the polymorphic
power of such a reference. To sample this usage, first create the second implementation
of Callback, shown here:
// Another implementation of Callback.
class AnotherClient implements Callback {
// Implement Callback's interface
public void callback(int p) {
System.out.println("Another version of callback");
System.out.println("p squared is " + (p*p));
}
}
Now, try the following class:
class TestIface2 {
public static void main(String args[]) {
Callback c = new Client();
C h a p t e r 9 : P a c k a g e s a n d I n t e r f a c e s 239
TH
E
JA
V
A
LA
N
G
U
A
G
E
AnotherClient ob = new AnotherClient();
c.callback(42);
c = ob; // c now refers to AnotherClient object
c.callback(42);
}
}
The output from this program is shown here:
callback called with 42
Another version of callback
p squared is 1764
As you can see, the version of callback( ) that is called is determined by the type of
object that c refers to at run time. While this is a very simple example, you will see
another, more practical one shortly.
Partial Implementations
If a class includes an interface but does not fully implement the methods defined by
that interface, then that class must be declared as abstract. For example:
abstract class Incomplete implements Callback {
int a, b;
void show() {
System.out.println(a + " " + b);
}
// ...
}
Here, the class Incomplete does not implement callback( ) and must be declared as
abstract. Any class that inherits Incomplete must implement callback( ) or be declared
abstract itself.
Applying Interfaces
To understand the power of interfaces, let’s look at a more practical example. In earlier
chapters you developed a class called Stack that implemented a simple fixed-size stack.
However, there are many ways to implement a stack. For example, the stack can be of a
fixed size or it can be “growable.” The stack can also be held in an array, a linked list,
a binary tree, and so on. No matter how the stack is implemented, the interface to the
stack remains the same. That is, the methods push( ) and pop( ) define the interface to
the stack independently of the details of the implementation. Because the interface to a
240 J a v a ™ 2 : T h e C o m p l e t e R e f e r e n c e
stack is separate from its implementation, it is easy to define a stack interface, leaving it
to each implementation to define the specifics. Let’s look at two examples.
First, here is the interface that defines an integer stack. Put this in a file called
IntStack.java. This interface will be used by both stack implementations.
// Define an integer stack interface.
interface IntStack {
void push(int item); // store an item
int pop(); // retrieve an item
}
The following program creates a class called FixedStack that implements a
fixed-length version of an integer stack:
// An implementation of IntStack that uses fixed storage.
class FixedStack implements IntStack {
private int stck[];
private int tos;
// allocate and initialize stack
FixedStack(int size) {
stck = new int[size];
tos = -1;
}
// Push an item onto the stack
public void push(int item) {
if(tos==stck.length-1) // use length member
System.out.println("Stack is full.");
else
stck[++tos] = item;
}
// Pop an item from the stack
public int pop() {
if(tos < 0) {
System.out.println("Stack underflow.");
return 0;
}
else
return stck[tos--];
}
}
class IFTest {
public static void main(String args[]) {
FixedStack mystack1 = new FixedStack(5);
FixedStack mystack2 = new FixedStack(8);
// push some numbers onto the stack
for(int i=0; i<5; i++) mystack1.push(i);
for(int i=0; i<8; i++) mystack2.push(i);
// pop those numbers off the stack
System.out.println("Stack in mystack1:");
for(int i=0; i<5; i++)
System.out.println(mystack1.pop());
System.out.println("Stack in mystack2:");
for(int i=0; i<8; i++)
System.out.println(mystack2.pop());
}
}
Following is another implementation of IntStack that creates a dynamic stack by
use of the same interface definition. In this implementation, each stack is constructed
with an initial length. If this initial length is exceeded, then the stack is increased in
size. Each time more room is needed, the size of the stack is doubled.
// Implement a "growable" stack.
class DynStack implements IntStack {
private int stck[];
private int tos;
// allocate and initialize stack
DynStack(int size) {
stck = new int[size];
tos = -1;
}
// Push an item onto the stack
public void push(int item) {
// if stack is full, allocate a larger stack
if(tos==stck.length-1) {
int temp[] = new int[stck.length * 2]; // double size
for(int i=0; i<stck.length; i++) temp[i] = stck[i];
C h a p t e r 9 : P a c k a g e s a n d I n t e r f a c e s 241
TH
E
JA
V
A
LA
N
G
U
A
G
E
stck = temp;
stck[++tos] = item;
}
else
stck[++tos] = item;
}
// Pop an item from the stack
public int pop() {
if(tos < 0) {
System.out.println("Stack underflow.");
return 0;
}
else
return stck[tos--];
}
}
class IFTest2 {
public static void main(String args[]) {
DynStack mystack1 = new DynStack(5);
DynStack mystack2 = new DynStack(8);
// these loops cause each stack to grow
for(int i=0; i<12; i++) mystack1.push(i);
for(int i=0; i<20; i++) mystack2.push(i);
System.out.println("Stack in mystack1:");
for(int i=0; i<12; i++)
System.out.println(mystack1.pop());
System.out.println("Stack in mystack2:");
for(int i=0; i<20; i++)
System.out.println(mystack2.pop());
}
}
The following class uses both the FixedStack and DynStack implementations.
It does so through an interface reference. This means that calls to push( ) and pop( )
are resolved at run time rather than at compile time.
242 J a v a ™ 2 : T h e C o m p l e t e R e f e r e n c e
C h a p t e r 9 : P a c k a g e s a n d I n t e r f a c e s 243
TH
E
JA
V
A
LA
N
G
U
A
G
E
/* Create an interface variable and
access stacks through it.
*/
class IFTest3 {
public static void main(String args[]) {
IntStack mystack; // create an interface reference variable
DynStack ds = new DynStack(5);
FixedStack fs = new FixedStack(8);
mystack = ds; // load dynamic stack
// push some numbers onto the stack
for(int i=0; i<12; i++) mystack.push(i);
mystack = fs; // load fixed stack
for(int i=0; i<8; i++) mystack.push(i);
mystack = ds;
System.out.println("Values in dynamic stack:");
for(int i=0; i<12; i++)
System.out.println(mystack.pop());
mystack = fs;
System.out.println("Values in fixed stack:");
for(int i=0; i<8; i++)
System.out.println(mystack.pop());
}
}
In this program, mystack is a reference to the IntStack interface. Thus, when it refers to
ds, it uses the versions of push( ) and pop( ) defined by the DynStack implementation.
When it refers to fs, it uses the versions of push( ) and pop( ) defined by FixedStack.
As explained, these determinations are made at run time. Accessing multiple
implementations of an interface through an interface reference variable is the most
powerful way that Java achieves run-time polymorphism.
Variables in Interfaces
You can use interfaces to import shared constants into multiple classes by simply
declaring an interface that contains variables which are initialized to the desired
values. When you include that interface in a class (that is, when you “implement” the
interface), all of those variable names will be in scope as constants. This is similar to
using a header file in C/C++ to create a large number of #defined constants or const
declarations. If an interface contains no methods, then any class that includes such an
interface doesn’t actually implement anything. It is as if that class were importing the
244 J a v a ™ 2 : T h e C o m p l e t e R e f e r e n c e
constant variables into the class name space as final variables. The next example uses
this technique to implement an automated “decision maker”:
import java.util.Random;
interface SharedConstants {
int NO = 0;
int YES = 1;
int MAYBE = 2;
int LATER = 3;
int SOON = 4;
int NEVER = 5;
}
class Question implements SharedConstants {
Random rand = new Random();
int ask() {
int prob = (int) (100 * rand.nextDouble());
if (prob < 30)
return NO;           // 30%
else if (prob < 60)
return YES;          // 30%
else if (prob < 75)
return LATER;        // 15%
else if (prob < 98)
return SOON;         // 13%
else
return NEVER;        // 2%
}
}
class AskMe implements SharedConstants {
static void answer(int result) {
switch(result) {
case NO:
System.out.println("No");
break;
case YES:
System.out.println("Yes");
break;
case MAYBE:
System.out.println("Maybe");
break;
case LATER:
System.out.println("Later");
break;
case SOON:
System.out.println("Soon");
break;
case NEVER:
System.out.println("Never");
break;
}
}
public static void main(String args[]) {
Question q = new Question();
answer(q.ask());
answer(q.ask());
answer(q.ask());
answer(q.ask());
}
}
Notice that this program makes use of one of Java’s standard classes: Random. This
class provides pseudorandom numbers. It contains several methods which allow you
to obtain random numbers in the form required by your program. In this example, the
method nextDouble( ) is used. It returns random numbers in the range 0.0 to 1.0.
In this sample program, the two classes, Question and AskMe, both implement the
SharedConstants interface where NO, YES, MAYBE, SOON, LATER, and NEVER are
defined. Inside each class, the code refers to these constants as if each class had defined
or inherited them directly. Here is the output of a sample run of this program. Note
that the results are different each time it is run.
Later
Soon
No
Yes
C h a p t e r 9 : P a c k a g e s a n d I n t e r f a c e s 245
TH
E
JA
V
A
LA
N
G
U
A
G
E
246 J a v a ™ 2 : T h e C o m p l e t e R e f e r e n c e
Interfaces Can Be Extended
One interface can inherit another by use of the keyword extends. The syntax is the
same as for inheriting classes. When a class implements an interface that inherits
another interface, it must provide implementations for all methods defined within
the interface inheritance chain. Following is an example:
// One interface can extend another.
interface A {
void meth1();
void meth2();
}
// B now includes meth1() and meth2() -- it adds meth3().
interface B extends A {
void meth3();
}
// This class must implement all of A and B
class MyClass implements B {
public void meth1() {
System.out.println("Implement meth1().");
}
public void meth2() {
System.out.println("Implement meth2().");
}
public void meth3() {
System.out.println("Implement meth3().");
}
}
class IFExtend {
public static void main(String arg[]) {
MyClass ob = new MyClass();
C h a p t e r 9 : P a c k a g e s a n d I n t e r f a c e s 247
TH
E
JA
V
A
LA
N
G
U
A
G
E
ob.meth1();
ob.meth2();
ob.meth3();
}
}
As an experiment you might want to try removing the implementation for meth1( )
in MyClass. This will cause a compile-time error. As stated earlier, any class that
implements an interface must implement all methods defined by that interface,
including any that are inherited from other interfaces.
Although the examples we’ve included in this book do not make frequent use of
packages or interfaces, both of these tools are an important part of the Java programming
environment. Virtually all real programs and applets that you write in Java will be
contained within packages. A number will probably implement interfaces as well.
It is important, therefore, that you be comfortable with their usage.
This page intentionally left blank.
Chapter 10
Exception Handling
249
