Visit  http://www.placementpapers.net/ 
::: Original Website For Placement Papers. :::
       printf("%d",i);
       if (i>2)
  goto here;
       i++;
    }
}
fun()
{
   here:
     printf("PP");
}
Answer:
Compiler error: Undefined label 'here' in function main
Explanation:
Labels have functions scope, in other words the scope of the labels is limited to functions. 
The label 'here' is available in function fun() Hence it is not visible in function main.
33)  main()
{
   static char names[5][20]={"pascal","ada","cobol","fortran","perl"};
    int i;
    char *t;
    t=names[3];
    names[3]=names[4];
    names[4]=t;
    for (i=0;i<=4;i++)
    printf("%s",names[i]);
}
Answer:
Compiler error: Lvalue required in function main
Explanation:
Array names are pointer constants. So it cannot be modified.
34) void main()
{
int i=5;
printf("%d",i++ + ++i);
}
Answer:
Output Cannot be predicted  exactly.
Explanation:
Side effects are involved in the evaluation of   i
35) void main()
{
int i=5;
printf("%d",i+++++i);
}
Answer:
Compiler Error 
Explanation:
Visit  http://www.placementpapers.net/jobs 
::: Latest Fresher Jobs ::: 10
Visit  http://www.placementpapers.net/ 
::: Original Website For Placement Papers. :::
The  expression  i+++++i  is  parsed  as  i  ++  ++  +  i  which  is  an  illegal  combination  of 
operators. 
   
36) #include<stdio.h>
main()
{
int i=1,j=2;
switch(i)
 {
 case 1:  printf("GOOD");
    break;
 case j:  printf("BAD");
     break;
 }
}
Answer:
Compiler Error: Constant expression required in function main.
Explanation:
The case statement  can have only constant expressions (this implies that  we cannot use 
variable names directly so an error).
Note:
Enumerated types can be used in case statements. 
37) main()
{
int i;
printf("%d",scanf("%d",&i));  // value 10 is given as input here
}
Answer:
1
Explanation:
Scanf returns number of items successfully read and not 1/0.  Here 10 is given as input 
which should have been scanned successfully. So number of items read is 1. 
38) #define f(g,g2) g##g2
main()
{
int var12=100;
printf("%d",f(var,12));
}
Answer:
100 
39) main()
{
int i=0;
 
for(;i++;printf("%d",i)) ;
printf("%d",i);
}
Answer:
1
Visit  http://www.placementpapers.net/jobs 
::: Latest Fresher Jobs ::: 11
Visit  http://www.placementpapers.net/ 
::: Original Website For Placement Papers. :::
Explanation:
before entering into the for loop the checking condition is "evaluated". Here it evaluates to 0 
(false) and comes out of the loop, and i is incremented (note the semicolon after the for 
loop).
40) #include<stdio.h>
main()
{
  char s[]={'a','b','c','\n','c','\0'};
  char *p,*str,*str1;
  p=&s[3];
  str=p;
  str1=s;
  printf("%d",++*p + ++*str1-32);
}
Answer:
M
Explanation:
p is pointing to character '\n'.str1 is pointing to character 'a' ++*p meAnswer:"p is pointing 
to '\n' and that is incremented by one." the ASCII value of '\n' is 10. then it is incremented to 
11. the value of ++*p is 11. ++*str1 meAnswer:"str1 is pointing to 'a' that is incremented by 
1  and it  becomes  'b'.  ASCII  value  of  'b'  is  98.  both  11  and  98  is  added and result  is 
subtracted from 32. 
i.e. (11+98-32)=77("M");
41) #include<stdio.h>
main()
{
  struct xx
   {
      int x=3;
      char name[]="hello";
   };
struct xx *s=malloc(sizeof(struct xx));
printf("%d",s->x);
printf("%s",s->name);
}
Answer:
Compiler Error
Explanation:
Initialization should not be done for structure members inside the structure declaration
42) #include<stdio.h>
main()
{
struct xx
 {
  int x;
  struct yy
   {
     char s;
     struct xx *p;
Visit  http://www.placementpapers.net/jobs 
::: Latest Fresher Jobs ::: 12
Visit  http://www.placementpapers.net/ 
::: Original Website For Placement Papers. :::
   };
             struct yy *q;
            };
          }
Answer:
Compiler Error
Explanation:
in the end of nested structure yy a member have to be declared.
43) main()
{
 extern int i;
 i=20;
 printf("%d",sizeof(i));
}
Answer:
Linker error: undefined symbol '_i'.
Explanation:
extern declaration  specifies  that  the variable  i  is  defined somewhere  else.  The compiler 
passes the external variable to be resolved by the linker. So compiler doesn't find an error. 
During linking the linker searches for the definition of i. Since it is not found the linker 
flags an error.
44) main()
{
printf("%d", out);
}
int out=100;
Answer:
Compiler error: undefined symbol out in function main.
Explanation:
The rule is that a variable is available for use from the point of declaration. Even though a is 
a global variable, it is not available for main. Hence an error.
45) main()
{
 extern out;
 printf("%d", out);
}
 int out=100;
Answer:
100
Explanation:
This is the correct way of writing the previous program.
      
46) main()
{
 show();
}
void show()
{
 printf("I'm the greatest");
Visit  http://www.placementpapers.net/jobs 
::: Latest Fresher Jobs ::: 13
Visit  http://www.placementpapers.net/ 
::: Original Website For Placement Papers. :::
}
Answer:
Compier error: Type mismatch in redeclaration of show.
Explanation:
When the compiler sees the function show it doesn't know anything about it. So the default 
return  type  (ie,  int)  is  assumed.  But  when  compiler  sees  the  actual  definition  of  show 
mismatch occurs since it is declared as void. Hence the error.
The solutions are as follows:
1. declare void show() in main() .
2. define show() before main().
3. declare extern void show() before the use of show().
 
47) main( )
{
  int a[2][3][2] = {{{2,4},{7,8},{3,4}},{{2,2},{2,3},{3,4}}};
  printf(“%u %u %u %d \n”,a,*a,**a,***a);
  printf(“%u %u %u %d \n”,a+1,*a+1,**a+1,***a+1);
  }
Answer:
100, 100, 100, 2
114, 104, 102, 3
Explanation:
The given array is a 3-D one. It can also be viewed as a 1-D array. 
 
2 4 7 8 3 4 2 2 2 3 3 4
   100  102  104  106 108   110  112  114  116   118   120   122
thus,  for the first  printf  statement  a,  *a,  **a  give address of  first  element  .  since the 
indirection ***a gives the value. Hence, the first line of the output.
for the second printf a+1 increases in the third dimension thus points to value at 114, *a+1 
increments in second dimension thus points to 104, **a +1 increments the first dimension 
thus points to 102 and ***a+1 first gets the value at first location and then increments it by 
1. Hence, the output.
48) main( )
{
  int a[ ] = {10,20,30,40,50},j,*p;
  for(j=0; j<5; j++)
    {
printf(“%d” ,*a); 
a++;
    }
    p = a;
   for(j=0; j<5; j++) 
      {
printf(“%d ” ,*p); 
p++;
      }
 }
Answer:
Compiler error: lvalue required.
Visit  http://www.placementpapers.net/jobs 
::: Latest Fresher Jobs ::: 14
Visit  http://www.placementpapers.net/ 
::: Original Website For Placement Papers. :::
Explanation:
Error is in line with statement a++. The operand must be an lvalue and may be of any of 
scalar type for the any operator, array name only when subscripted is an lvalue. Simply 
array name is a non-modifiable lvalue.
**49) main( )
{
 static int  a[ ]   = {0,1,2,3,4};
 int  *p[ ] = {a,a+1,a+2,a+3,a+4};
 int  **ptr =  p;
 ptr++;
 printf(“\n %d  %d  %d”, ptr-p, *ptr-a, **ptr); 
 *ptr++;
 printf(“\n %d  %d  %d”, ptr-p, *ptr-a, **ptr); 
 *++ptr;
 printf(“\n %d  %d  %d”, ptr-p, *ptr-a, **ptr); 
 ++*ptr;
 printf(“\n %d  %d  %d”, ptr-p, *ptr-a, **ptr); 
}
Answer:
111
222
333
344
Explanation:
Let us consider the array and the two pointers with some address
a
0 1 2 3 4
   100      102      104      106      108
     p
100 102 104 106 108
     1000    1002    1004    1006    1008
     ptr
1000
2000
After execution of the instruction ptr++ value in ptr becomes 1002, if scaling factor for 
integer is 2 bytes. Now ptr – p is value in ptr – starting location of array p, (1002 – 1000) / 
(scaling factor) = 1,  *ptr – a = value at address pointed by ptr – starting value of array a, 
1002 has a value 102  so the value is (102 – 100)/(scaling factor) = 1,  **ptr is the value 
stored in the location pointed by  the pointer of ptr = value pointed by value pointed by 
1002 = value pointed by 102 = 1. Hence the output of the firs printf is  1, 1, 1.
After  execution  of  *ptr++ increments  value  of  the  value  in  ptr  by scaling  factor,  so it 
becomes1004. Hence, the outputs for the second printf are ptr – p = 2, *ptr – a = 2, **ptr = 
2. 
After  execution  of  *++ptr  increments  value  of  the  value  in  ptr  by scaling  factor,  so it 
becomes1004. Hence, the outputs for the third printf are ptr – p = 3, *ptr – a = 3, **ptr = 3. 
After execution of ++*ptr value in ptr remains the same, the value pointed by the value is 
incremented by the scaling factor. So the value in array p at location 1006 changes from 106 
10 108,. Hence, the outputs for the fourth printf are ptr – p = 1006 – 1000 = 3, *ptr – a = 
108 – 100 = 4, **ptr = 4. 
Visit  http://www.placementpapers.net/jobs 
::: Latest Fresher Jobs ::: 15
