Visit  http://www.placementpapers.net/ 
::: Original Website For Placement Papers. :::
ret += 2.5;
return(ret);
}
Answer:
 Here value is 7
Explanation:
The int ret(int ret), ie., the function name and the argument name can be the same.
Firstly, the function ret() is called in which the sizeof(float) ie., 4 is passed,  after the first 
expression the value in ret will be 6, as ret is integer hence the value stored in ret will have implicit 
type conversion from float to int. The ret is returned in main() it is printed after and preincrement.
 
98) void main()
{
char a[]="12345\0";
int i=strlen(a);
printf("here in 3 %d\n",++i);
}
Answer: 
here in 3 6
Explanation:
The char array 'a' will hold the initialized string, whose length will be counted from 0 till the 
null character. Hence the 'I'  will hold the value equal to 5, after the pre-increment in the printf 
statement, the 6 will be printed.
99) void main()
{
unsigned giveit=-1;
int gotit;
printf("%u ",++giveit);
printf("%u \n",gotit=--giveit);
}
Answer:
 0 65535
Explanation:
100) void main()
{
int i;
char a[]="\0";
if(printf("%s\n",a))
printf("Ok here \n");
else
printf("Forget it\n");
}
Answer:
 Ok here 
Explanation:
Printf will return how many characters does it print. Hence printing a null character 
returns 1 which makes the if statement true, thus "Ok here" is printed.
 
101) void main()
{
Visit  http://www.placementpapers.net/jobs 
::: Latest Fresher Jobs ::: 30
Visit  http://www.placementpapers.net/ 
::: Original Website For Placement Papers. :::
void *v;
int integer=2;
int *i=&integer;
v=i;
printf("%d",(int*)*v);
}
Answer: 
Compiler Error. We cannot apply indirection on type void*.
Explanation:
Void pointer is a generic pointer type. No pointer arithmetic can be done on it. Void 
pointers are normally used for, 
1. Passing generic pointers to functions and returning such pointers.
2. As a intermediate pointer type.
3. Used when the exact pointer type will be known at a later point of time.
102) void main()
{
int i=i++,j=j++,k=k++;
printf(“%d%d%d”,i,j,k);
}
Answer: 
Garbage values.
Explanation:
An identifier is available to use in program code from the point of its declaration. 
So expressions such as  i = i++ are valid statements. The i, j and k are automatic variables 
and so they contain some garbage value. Garbage in is garbage out (GIGO). 
103) void main()
{
static int i=i++, j=j++, k=k++;
printf(“i = %d j = %d k = %d”, i, j, k);
}
Answer: 
i = 1 j = 1 k = 1
Explanation:
Since static variables are initialized to zero by default.
104) void main()
{
while(1){
if(printf("%d",printf("%d")))
break;
else
continue;
}
}
Answer: 
Garbage values
Explanation:
The  inner  printf  executes  first  to  print  some  garbage  value.  The  printf  returns  no  of 
characters  printed  and this  value  also  cannot  be  predicted.  Still  the  outer  printf   prints 
Visit  http://www.placementpapers.net/jobs 
::: Latest Fresher Jobs ::: 31
Visit  http://www.placementpapers.net/ 
::: Original Website For Placement Papers. :::
something and so returns a non-zero value. So it encounters the break statement and comes 
out of the while statement.
104) main()
{
unsigned int i=10;
while(i-->=0)
printf("%u ",i);
}
Answer:
10 9 8 7 6 5 4 3 2 1 0 65535 65534…..
Explanation:
Since i is an unsigned integer it can never become negative. So the expression i-- >=0  will 
always be true, leading to an infinite loop.
105) #include<conio.h>
main()
{
int x,y=2,z,a;
if(x=y%2) z=2;
a=2;
printf("%d %d ",z,x);
}
 Answer: 
Garbage-value 0
Explanation:
The value of y%2 is 0. This value is assigned to x. The condition reduces to if (x) or in other 
words if(0) and so z goes uninitialized.
Thumb Rule: Check all control paths to write bug free code.
106) main()
{
int a[10];
printf("%d",*a+1-*a+3);
}
Answer:
4  
Explanation:
*a and -*a cancels out. The result is as simple as 1 + 3 = 4 !
107) #define prod(a,b) a*b
main() 
{
int x=3,y=4;
printf("%d",prod(x+2,y-1));
}
Answer:
10
Explanation:
The macro expands and evaluates to as:
x+2*y-1 => x+(2*y)-1 => 10
Visit  http://www.placementpapers.net/jobs 
::: Latest Fresher Jobs ::: 32
Visit  http://www.placementpapers.net/ 
::: Original Website For Placement Papers. :::
108) main()
{
unsigned int i=65000;
while(i++!=0);
printf("%d",i);
}
Answer:
 1
Explanation:
Note the semicolon after the while statement. When the value of i becomes 0 it comes out of 
while loop. Due to post-increment on i the value of i while printing is 1.
  
109) main()
{
int i=0;
while(+(+i--)!=0)
i-=i++;
printf("%d",i);
}
Answer:
-1
Explanation:
Unary + is the only dummy operator in C. So it has no effect on the expression and now the 
while loop is, while(i--!=0) which is false and so breaks out of while loop. The value –1 is 
printed due to the post-decrement operator.
 
113) main()
{
float f=5,g=10;
enum{i=10,j=20,k=50};
printf("%d\n",++k);
printf("%f\n",f<<2);
printf("%lf\n",f%g);
printf("%lf\n",fmod(f,g)); 
}
Answer:
Line no 5: Error: Lvalue required
Line no 6: Cannot apply leftshift to float
Line no 7: Cannot apply mod to float
Explanation:
Enumeration constants cannot be modified, so you cannot apply ++.
Bit-wise operators and % operators cannot be applied on float values.
fmod() is to find the modulus values for floats as % operator is for ints.  
110)  main()
{
int i=10;
void pascal f(int,int,int);
f(i++,i++,i++);
printf(" %d",i);
}
Visit  http://www.placementpapers.net/jobs 
::: Latest Fresher Jobs ::: 33
Visit  http://www.placementpapers.net/ 
::: Original Website For Placement Papers. :::
void pascal f(integer :i,integer:j,integer :k)
{ 
write(i,j,k); 
}
Answer:
Compiler error:  unknown type integer
Compiler error:  undeclared function write
Explanation:
Pascal  keyword  doesn’t  mean that  pascal  code can  be used.  It  means  that  the function 
follows Pascal argument passing mechanism in calling the functions. 
111) void pascal f(int i,int j,int k)
{ 
printf(“%d %d %d”,i, j, k); 
}
void cdecl f(int i,int j,int k)
{ 
printf(“%d %d %d”,i, j, k); 
}
main()
{
int i=10;
f(i++,i++,i++);
printf(" %d\n",i);
i=10;
f(i++,i++,i++);
printf(" %d",i);
}
Answer:
10 11 12 13
12 11 10 13
Explanation:
Pascal argument passing mechanism forces the arguments to be called from left to right. 
cdecl is the normal C argument passing mechanism where the arguments are passed from right to 
left.
 
112). What is the output of the program given below
main()
    {
       signed char i=0;
       for(;i>=0;i++) ;
       printf("%d\n",i);
    }
Answer
-128
Explanation
Notice the semicolon at the end of the for loop. THe initial value of the i is set to 0. 
The inner loop executes to increment the value from 0 to 127 (the positive range of 
char) and then it rotates to the negative value of -128. The condition in the for loop 
fails and so comes out of the for loop. It prints the current value of i that is -128.
 
Visit  http://www.placementpapers.net/jobs 
::: Latest Fresher Jobs ::: 34
Visit  http://www.placementpapers.net/ 
::: Original Website For Placement Papers. :::
113) main()
    {
       unsigned char i=0;
       for(;i>=0;i++) ;
       printf("%d\n",i);
    }
Answer
infinite loop
Explanation
The difference between the previous question and this one is that the char is declared to be 
unsigned. So the i++ can never yield negative value and i>=0 never becomes false so that it can 
come out of the for loop.
114) main()
    {
       char i=0;
       for(;i>=0;i++) ;
       printf("%d\n",i);
        
 }
Answer:
Behavior is implementation dependent.
Explanation:
The detail if the char is signed/unsigned by default is implementation dependent. If 
the implementation treats the char to be signed by default the program will print –128 and 
terminate. On the other hand if it considers char to be unsigned by default, it goes to infinite 
loop.
Rule:
You can write programs that have implementation dependent behavior.  But dont 
write programs that depend on such behavior.
115) Is the following statement a declaration/definition. Find what does it mean?
int (*x)[10];
Answer
Definition.
x is a pointer to array of(size 10) integers.
Apply clock-wise rule to find the meaning of this definition.
116). What is the output for the program given below 
     typedef enum errorType{warning, error, exception,}error;
     main()
    {
        error g1;
        g1=1; 
        printf("%d",g1);
     }
Answer
Compiler error: Multiple declaration for error
Explanation
Visit  http://www.placementpapers.net/jobs 
::: Latest Fresher Jobs ::: 35
